// Generated by CoffeeScript 1.7.1
(function() {
  var GPlusAPI, api, col_e, col_upd, counter, crc32, db, fetch, fs, jsdom, make_esc, mongo, question, request, time, update, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  make_esc = require('iced-error').make_esc;

  jsdom = require('jsdom');

  fs = require('fs');

  request = require('request');

  crc32 = require('crc').crc32;

  mongo = require('mongoskin');

  _ = require('underscore');

  time = require('time');

  global.CONFIG = JSON.parse(fs.readFileSync('config.json'));

  GPlusAPI = require('./lib/api');

  api = new GPlusAPI(CONFIG.refresh_token, CONFIG.uid);

  db = mongo.db(CONFIG.mongodb, {
    w: true
  });

  col_upd = db.collection('updates');

  col_e = db.collection('edits');

  fetch = function(gcb) {
    var $, e, esc, html, item, list;
    esc = make_esc(gcb);
    await(request({
      url: 'http://zh.moegirl.org/api.php',
      qs: {
        format: 'json',
        action: 'parse',
        page: 'User:萌星空/你知道吗/存档/更新姬版',
        prop: 'text'
      },
      method: 'GET',
      timeout: 10000,
      headers: {
        'User-Agent': 'Node.js'
      }
    }, esc(defer(req))));
    if (req.statusCode === !200) {
      return gcb(req.statusCode);
    }
    html = '';
    try {
      html = JSON.parse(req.body).parse.text['*'];
    } catch (_error) {
      e = _error;
      return gcb(e);
    }
    await(jsdom.env(html, ['jquery.js'], {}, esc(defer(window))));
    $ = window.$;
    $('table').remove();
    list = (function() {
      var _i, _len, _ref, _results;
      _ref = $('li');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        _results.push({
          title: $.trim($(item).text().split('——')[0]),
          url: 'http://zh.moegirl.org' + $(item).children('a:last').attr('href'),
          "new": $(item).children('a:last').hasClass('new')
        });
      }
      return _results;
    })();
    return gcb(null, list);
  };

  update = function(gcb) {
    var e, esc, item, rc, rcids, results, str;
    esc = make_esc(gcb);
    await(request({
      url: 'http://zh.moegirl.org/api.php?format=json&action=query&list=recentchanges&rcnamespace=0&rctoponly=1&rcprop=flags|title|ids',
      method: 'GET',
      timeout: 10000,
      headers: {
        'User-Agent': 'Node.js'
      }
    }, esc(defer(req))));
    if (req.statusCode === !200) {
      return gcb(req.statusCode);
    }
    rc = [];
    try {
      rc = JSON.parse(req.body).query.recentchanges;
    } catch (_error) {
      e = _error;
      return gcb(e);
    }
    rc = rc.filter(function(i) {
      return i.bot == null;
    });
    rcids = (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = rc.length; _i < _len; _i++) {
        item = rc[_i];
        _results.push(item.rcid);
      }
      return _results;
    })();
    await(col_e.find({
      rcid: {
        '$in': rcids
      }
    }, {
      _id: 0,
      rcid: 1
    }).toArray(esc(defer(results))));
    if (rc.length === results.length) {
      return gcb(new Error('nothing to post'));
    }
    results = _.flatten(results.map(function(item) {
      return item.rcid;
    }));
    item = _.find(rc, function(item) {
      var _ref;
      return _ref = item.rcid, __indexOf.call(results, _ref) < 0;
    });
    if (item == null) {
      return gcb(new Error('nothing to post'));
    }
    item.url = 'http://zh.moegirl.org/' + item.title;
    await(api.linkPreview(encodeURI(item.url), esc(defer(embed))));
    if (!embed.succeeded) {
      return gcb(new Error("Cannot fetch " + item.url + " from Google server."));
    }
    if (embed.embedItem[0].webPage.description == null) {
      await(setTimeout(defer(), 60000 * 3));
      await(api.linkPreview(encodeURI(item.url), esc(defer(embed))));
      if (embed.embedItem[0].webPage.description == null) {
        await(col_upd.insert(_.extend(item, {
          error: 'linkpreview failed'
        }), esc(defer())));
        if (!embed.succeeded) {
          return gcb(new Error("Cannot fetch " + item.url + " from Google server."));
        }
      }
    }
    str = "条目： #" + (item.title.replace(' ', '_')) + "\n\n更新了哦！不来看看么？\n传送在此：\n\n→_→ " + (encodeURI(item.url));
    await(api.postPublicActivity(str, embed.embedItem[0], esc(defer(activity))));
    await(col_e.insert({
      rcid: item.rcid
    }, esc(defer())));
    return gcb(null, activity, item.rcid);
  };

  question = function(gcb) {
    var esc, hash, i, item, results, _i, _len;
    esc = make_esc(gcb);
    await(fetch(esc(defer(list))));
    hash = [];
    for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
      item = list[i];
      item.hash = crc32(item.title);
      list[i].hash = item.hash;
      hash.push(item.hash);
    }
    await(col_upd.find({
      hash: {
        '$in': hash
      }
    }, {
      _id: 0,
      hash: 1
    }).toArray(esc(defer(results))));
    if (list.length === results.length) {
      return gcb(new Error('nothing to post'));
    }
    results = _.flatten(results.map(function(item) {
      return item.hash;
    }));
    item = _.find(list, function(item) {
      var _ref;
      return _ref = item.hash, __indexOf.call(results, _ref) < 0;
    });
    if (item == null) {
      return gcb(new Error('nothing to post'));
    }
    await(api.linkPreview(item.url, esc(defer(embed))));
    if (!embed.succeeded) {
      return gcb(new Error("Cannot fetch " + item.url + " from Google server."));
    }
    if (embed.embedItem[0].webPage.description == null) {
      await(setTimeout(defer(), 60000 * 3));
      await(api.linkPreview(item.url, esc(defer(embed))));
      if (embed.embedItem[0].webPage.description == null) {
        await(col_upd.insert(_.extend(item, {
          error: 'linkpreview failed'
        }), esc(defer())));
        if (!embed.succeeded) {
          return gcb(new Error("Cannot fetch " + item.url + " from Google server."));
        }
      }
    }
    await(api.postPublicActivity(item.title, embed.embedItem[0], esc(defer(activity))));
    await(col_upd.insert(item, esc(defer())));
    return gcb(null, activity, item);
  };

  counter = 1;

  setInterval(function() {
    var now;
    now = new time.Date();
    now.setTimezone('Asia/Shanghai');
    if (now.getHours() < 6) {
      if (counter === 4) {
        return update(function(err, a, rcid) {
          counter = 1;
          if (err) {
            return require('util').log("[U][ERROR]" + err.message);
          }
          return require('util').log("[Q][POSTED]" + a.stream.update[0].updateId + "(" + rcid + ")");
        });
      } else {
        return counter++;
      }
    } else {
      return update(function(err, a, rcid) {
        counter = 1;
        if (err) {
          setTimeout(function() {
            return update(function(err, a, rcid) {
              if (err) {
                return require('util').log("[U][ERROR]" + err.message);
              }
              return require('util').log("[U][POSTED]" + a.stream.update[0].updateId + "(" + rcid + ")");
            });
          }, 300000);
          return require('util').log("[U][ERROR]" + err.message);
        }
        return require('util').log("[U][POSTED]" + a.stream.update[0].updateId + "(" + rcid + ")");
      });
    }
  }, 1200000);

  setInterval(function() {
    return question(function(err, a, i) {
      if (err) {
        return require('util').log("[Q][ERROR]" + err.message);
      }
      return require('util').log("[Q][POSTED]" + a.stream.update[0].updateId + "(" + i.hash + ")");
    });
  }, 3600000);

}).call(this);

//# sourceMappingURL=main.map
